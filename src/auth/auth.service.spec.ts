import { Test, TestingModule } from '@nestjs/testing';
import { AuthService } from './auth.service';

import {
  IRequestToken,
  IResponseRequestToken,
} from '../interfaces/auth.interfaces';
import { PromiseCreateUserInterface } from '../interfaces/user.interfaces';

// fake tast vars/objs
//  token req/res
const token = {
  token:
    'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7Il9pZCI6IjYxYjVjOTczYWY3NDNiNzM0YzhjZTQzYSIsInJvbGUiOiJ1c2VyIiwidXNlckNvZGUiOiI2NjQ1Y2I1OTc5NjMifSwiaWF0IjoxNjM5MzA5MjQxfQ.ea4WCZ1uPUnPB9hSavH9pxDtQWg-wonr77M4wAfyGWw',
};
// user for token request
const objTestUser = {
  email: 'johndoe@gmail.com',
  password: '12345678',
};
//user response
const objToReturn = {
  firstName: 'John',
  lastName: 'Doe',
  email: 'johndoe@gmail.com',
  password: '12345678',
  userCode: '009', // autogenerated
  instrument: 'Sax', // array
  role: 'user', // default player
  _id: 'id434id32di', // default player
  __v: 0, // default player
};

// class to mock functions
class AuthServiceMock {
  getUserData(token: IResponseRequestToken): PromiseCreateUserInterface {
    return objToReturn;
  }

  postToGetToken(bodyUserToken: IResponseRequestToken): IResponseRequestToken {
    return token;
  }
}

describe.skip('AuthService', () => {
  let service: AuthService;

  beforeEach(async () => {
    const AuthServiceProvider = {
      provide: AuthService,
      useClass: AuthServiceMock,
    };

    const module: TestingModule = await Test.createTestingModule({
      providers: [AuthService, AuthServiceProvider],
    }).compile();

    service = module.get<AuthService>(AuthService);
  });

  it('should be defined', () => {
    expect(service).toBeDefined();
  });

  it('getUserData() > user data', async () => {
    const userData = await service.getUserData(token);
    expect(userData).toBe(objToReturn);
  });

  it('postToGetToken() > token', async () => {
    const tokenReq = await service.postToGetToken(token);
    expect(tokenReq.token).toBe(token.token);
  });
});
