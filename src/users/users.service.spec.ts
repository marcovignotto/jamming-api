import { Test, TestingModule } from '@nestjs/testing';
import { UsersService } from './users.service';

import {
  credentialUserAdmin,
  credentialUserGeneral,
} from '../test/utils/testCredentials';

// interfaces
import {
  CreateUserInterface,
  PromiseCreateUserInterface,
} from '../interfaces/user.interfaces';

// test objects
// just for the unit testing

const objPostUser = credentialUserGeneral();

const objUpdateUser = credentialUserAdmin();

// class to mock functions
class UsersServiceMock {
  getAllUsers(): string[] {
    return ['1', '2', '3'];
  }

  postUser(obj: CreateUserInterface): PromiseCreateUserInterface {
    const objToReturn = {
      firstName: obj.firstName,
      lastName: obj.lastName,
      email: obj.email,
      password: obj.password,
      userCode: '009', // autogenerated
      instrument: obj.instrument, // array
      role: obj.role, // default user
      _id: 'id434id32di', // mongo id
      __v: 0,
    };

    return objToReturn;
  }

  updateUser(id: string, obj: CreateUserInterface): PromiseCreateUserInterface {
    const objToReturn = {
      firstName: obj.firstName,
      lastName: obj.lastName,
      email: obj.email,
      password: obj.password,
      userCode: '009', // autogenerated
      instrument: obj.instrument, // array
      role: obj.role, // default user
      _id: 'id434id32di', // mongo id
      __v: 0,
    };

    return objToReturn;
  }

  deleteUser(firstName: string, lastName: string, id: string) {
    const deleteConfirmation = `User ${firstName} ${lastName} with the id ${id} deleted`;

    return deleteConfirmation;
  }
}

describe.skip('UsersService', () => {
  let service: UsersService;

  beforeEach(async () => {
    const UsersServiceProvider = {
      provide: UsersService,
      useClass: UsersServiceMock, // mocks UserServices overides provide
    };

    const module: TestingModule = await Test.createTestingModule({
      providers: [UsersService, UsersServiceProvider],
    }).compile();

    service = module.get<UsersService>(UsersService);
  });

  it('should be defined', () => {
    expect(service).toBeDefined();
  });

  it(`getAllUsers() > ['1', '2', '3']`, async () => {
    const expectResult = ['1', '2', '3'];

    const func = await service.getAllUsers();

    expect(func).toEqual(expectResult);
  });

  it(`postUser() > firstName, lastName, email`, async () => {
    const func = await service.postUser(objPostUser);
    expect.assertions(3);

    expect(func.firstName).toBe(objPostUser['firstName']);
    expect(func.lastName).toBe(objPostUser['lastName']);
    expect(func.email).toBe(objPostUser['email']);
  });

  it(`updateUser() > firstName, lastName, email`, async () => {
    const func = await service.updateUser(
      '61be2742319a4cf631880f92',
      objUpdateUser,
    );

    expect.assertions(3);

    expect(func.firstName).toBe(objUpdateUser['firstName']);
    expect(func.lastName).toBe(objUpdateUser['lastName']);
    expect(func.email).toBe(objUpdateUser['email']);
  });

  it(`deleteUser() > user first name last name id deleted`, async () => {
    const func = await service.deleteUser(
      objPostUser['firstName'],
      objPostUser['lastName'],
      '009',
    );

    expect.assertions(1);

    expect(func).toBe(
      `User ${objPostUser['firstName']} ${objPostUser['lastName']} with the id 009 deleted`,
    );
  });
});
