import { Test, TestingModule } from '@nestjs/testing';
import { UsersService } from './users.service';
import { AppService } from '../app.service';

import { PostUserRequest, PostUserResponse } from './users.service';

// test objects
// just for the unit testing

const objPostUser = {
  firstName: 'John',
  lastName: 'Doe',
  email: 'johndoe@gmail.com',
  password: '12345678',
  instruments: ['Sax', 'Drum'],
  role: 'player',
};

const objUpdateUser = {
  firstName: 'Jane',
  lastName: 'Doe',
  email: 'janedoe@gmail.com',
  password: '12345678',
  instruments: ['Sax', 'Piano'],
  role: 'admin',
};

// class to mock functions
class UsersServiceMock {
  getAllUsers(): string[] {
    return ['1', '2', '3'];
  }

  postUser(
    firstName: string,
    lastName: string,
    email: string,
    password: string,
    instruments: string[],
    role: string,
  ): PostUserResponse {
    const objToReturn = {
      firstName: firstName,
      lastName: lastName,
      email: email,
      password: password,
      userCode: '009', // autogenerated
      instruments: instruments, //
      role: role, // default player
    };

    return objToReturn;
  }

  updateUser(
    firstName: string,
    lastName: string,
    email: string,
    password: string,
    instruments: string[],
    role: string,
  ): PostUserResponse {
    const objToReturn = {
      firstName: firstName,
      lastName: lastName,
      email: email,
      password: password,
      userCode: '009',
      instruments: instruments,
      role: role,
    };

    return objToReturn;
  }

  deleteUser(firstName: string, lastName: string, id: string) {
    const deleteConfirmation = `User ${firstName} ${lastName} with the id ${id} deleted`;

    return deleteConfirmation;
  }
}

describe.skip('UsersService', () => {
  let service: UsersServiceMock;

  beforeEach(async () => {
    const UsersServiceProvider = {
      provide: UsersService,
      useClass: UsersServiceMock, // mocks UserServices
    };

    const module: TestingModule = await Test.createTestingModule({
      providers: [UsersService, UsersServiceProvider],
    }).compile();

    service = module.get<UsersService>(UsersService);
  });

  it('should be defined', () => {
    expect(service).toBeDefined();
  });

  it(`getAllUsers() > ['1', '2', '3']`, async () => {
    const expectResult = ['1', '2', '3'];

    const func = await service.getAllUsers();

    expect(func).toEqual(expectResult);
  });

  it(`postUser() > firstName, lastName, email`, async () => {
    const func = await service.postUser(
      objPostUser.firstName,
      objPostUser.lastName,
      objPostUser.email,
      objPostUser.password,
      objPostUser.instruments,
      objPostUser.role,
    );

    expect.assertions(3);

    expect(func.firstName).toBe(objPostUser.firstName);
    expect(func.lastName).toBe(objPostUser.lastName);
    expect(func.email).toBe(objPostUser.email);
  });

  it(`updateUser() > firstName, lastName, email`, async () => {
    const func = await service.postUser(
      objUpdateUser.firstName,
      objUpdateUser.lastName,
      objUpdateUser.email,
      objUpdateUser.password,
      objUpdateUser.instruments,
      objUpdateUser.role,
    );

    expect.assertions(3);

    expect(func.firstName).toBe(objUpdateUser.firstName);
    expect(func.lastName).toBe(objUpdateUser.lastName);
    expect(func.email).toBe(objUpdateUser.email);
  });

  it(`deleteUser() > user first name last name id deleted`, async () => {
    const func = await service.deleteUser(
      objPostUser.firstName,
      objPostUser.lastName,
      '009',
    );

    expect.assertions(1);

    expect(func).toBe(
      `User ${objPostUser.firstName} ${objPostUser.lastName} with the id 009 deleted`,
    );
  });
});
